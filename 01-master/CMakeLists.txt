cmake_minimum_required(VERSION 3.2.3)
project(spio CXX)

set(WERROR ON CACHE BOOL "Treat warnings as errors")
set(SPIO_HEADER_ONLY ON CACHE BOOL "Build as a header only library")
set(SPIO_USE_STL ON CACHE BOOL "Use the STL")
set(SPIO_USE_EXCEPTIONS ON CACHE BOOL "Enable exceptions")
set(SPIO_THROW_ON_ASSERT ON CACHE BOOL "Throw on assertion failure")

set(CMAKE_CXX_EXTERNSIONS OFF)

set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL "Build Google Benchmark tests")
add_subdirectory(benchmark/google-benchmark)

include(CheckCXXCompilerFlag)

macro(add_compiler_flags)
    foreach(flag ${ARGV})
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}")
    endforeach()
endmacro()

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    if(WERROR)
        add_compiler_flags(-Werror)
    endif()

    add_compiler_flags(-pedantic-errors)
    add_compiler_flags(-fvisibility=hidden)
    add_compiler_flags(-fstrict-aliasing)
    if(NOT CMAKE_CXX_STANDARD)
        add_compiler_flags(-std=c++1z)
    endif()
    add_compiler_flags(-ftemplate-backtrace-limit=0)
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    add_compiler_flags(-Wall)
    add_compiler_flags(-Wextra)
    add_compiler_flags(-fdiagnostics-show-option)
    #add_compiler_flags(-Wconversion)
    add_compiler_flags(-Wold-style-cast)
    add_compiler_flags(-Wfloat-equal)
    add_compiler_flags(-Wlogical-op)
    add_compiler_flags(-Wundef)
    add_compiler_flags(-Wredundant-decls)
    add_compiler_flags(-Wshadow)
    #add_compiler_flags(-Wstrict-overflow=5)
    add_compiler_flags(-Wwrite-strings)
    add_compiler_flags(-Wpointer-arith)
    add_compiler_flags(-Wcast-qual)
    add_compiler_flags(-Wformat=2)
    #add_compiler_flags(-Wswitch-default)
    add_compiler_flags(-Wmissing-include-dirs)
    add_compiler_flags(-Wcast-align)
    add_compiler_flags(-Wswitch-enum)
    add_compiler_flags(-Wnon-virtual-dtor)
    add_compiler_flags(-Wctor-dtor-privacy)
    add_compiler_flags(-Wsign-conversion)
    add_compiler_flags(-Wdisabled-optimization)
    #add_compiler_flags(-Weffc++)
    #add_compiler_flags(-Winline)
    add_compiler_flags(-Winvalid-pch)
    add_compiler_flags(-Wmissing-declarations)
    add_compiler_flags(-Woverloaded-virtual)

    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9)
        add_compiler_flags(-pedantic)
    else()
        add_compiler_flags(-Wpedantic)
    endif()

    if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.6)
        add_compiler_flags(-Wnoexcept)
    endif()

    if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
        add_compiler_flags(-Wdouble-promotion)
        add_compiler_flags(-Wtrampolines)
        add_compiler_flags(-Wzero-as-null-pointer-constant)
        add_compiler_flags(-Wuseless-cast)
        add_compiler_flags(-Wvector-operation-performance)
        add_compiler_flags(-Wsized-deallocation)
    endif()

    if(CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 6.0 OR CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 6.0)
        add_compiler_flags(-Wshift-overflow=2)
        add_compiler_flags(-Wnull-dereference)
        add_compiler_flags(-Wduplicated-cond)
    endif()

    add_compiler_flags(-Wno-strict-overflow)
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compiler_flags(-Weverything)
    add_compiler_flags(-Wpedantic)
    add_compiler_flags(-Wno-c++98-compat)
    add_compiler_flags(-Wno-c++98-compat-pedantic)
    add_compiler_flags(-Wno-weak-vtables)
    add_compiler_flags(-Wno-padded)
    add_compiler_flags(-Wno-gnu-statement-expression) # assert uses these
    add_compiler_flags(-Wno-global-constructors)
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    add_compiler_flags(/std:c++latest) # for post c++14 updates in MSVC
    add_compiler_flags(/W4) # /Wall is too aggressive - even the standard C headers give thousands of errors...
    if(WERROR)
        add_compiler_flags(/WX)
    endif()
endif()

include_directories("${PROJECT_SOURCE_DIR}/include")
include_directories(SYSTEM "${PROJECT_SOURCE_DIR}/benchmark/google-benchmark/include")
include_directories(SYSTEM "${PROJECT_SOURCE_DIR}/tests/doctest/doctest")

if(SPIO_HEADER_ONLY)
    add_definitions(-DSPIO_HEADER_ONLY=1)
else()
    add_definitions(-DSPIO_HEADER_ONLY=0)
endif()

if(SPIO_USE_STL)
    add_definitions(-DSPIO_USE_STL=1)
else()
    add_definitions(-DSPIO_USE_STL=0)
endif()

if(SPIO_USE_EXCEPTIONS)
    add_definitions(-DSPIO_USE_EXCEPTIONS=1)
else()
    add_definitions(-DSPIO_USE_EXCEPTIONS=0)
endif()

if(SPIO_THROW_ON_ASSERT)
    add_definitions(-DSPIO_THROW_ON_ASSERT=1)
else()
    add_definitions(-DSPIO_THROW_ON_ASSERT=0)
endif()


enable_testing()
add_subdirectory(include/spio)
add_subdirectory(tests)
add_subdirectory(benchmark)
